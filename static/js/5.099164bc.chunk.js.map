{"version":3,"sources":["components/Loader/Loader.tsx","pages/Skills/Skills.tsx"],"names":["Loader","className","styles","data-testid","Skills","icons","state","error","loading","data","quote","author","text","tech","activeSkill","key","items","level","ReactGA","pageview","fetch","then","res","json","result","setState","skillset","this","map","item","i","name","years","onClick","setSkillSet","listSkillSet","Component"],"mappings":"yGAAA,4CAgBeA,UAbU,kBACvB,yBAAKC,UAAWC,IAAOF,OAAQG,cAAY,UACzC,yBAAKF,UAAU,qBACb,6BACE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,YAEjB,wD,sICLFG,E,4MACJC,MAAQ,CACN,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,O,EAGFC,MAAQ,CACNC,MAAO,KACPC,SAAS,EACTC,KAAM,CACJC,MAAO,CAAEC,OAAQ,GAAIC,KAAM,IAC3BC,KAAM,IAERC,YAAa,CACXC,IAAK,GACLC,MAAO,K,EAIXC,MAAQ,CACN,OAAU,OACV,WAAc,MACd,SAAY,MACZ,SAAY,O,kEAGO,IAAD,OAClBC,IAAQC,SAAS,UAEjBC,MAAM,2BACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEjB,SAAS,EAAOC,KAAMe,OACrC,SAACjB,GACF,EAAKkB,SAAS,CACZjB,SAAS,EACTC,KAAM,CACJC,MAAO,CAAEC,OAAQ,GAAIC,KAAM,IAC3BC,KAAM,W,kCAMJa,GACVC,KAAKF,SAAS,CAAEX,YAAaY,GAAY,CAAEX,IAAK,GAAIC,MAAO,Q,qCAG5C,IAAD,OACd,OAAKW,KAAKrB,MAAMQ,YAAYC,IAaxBY,KAAKrB,MAAMQ,YAAYE,MAAMY,KAAI,SAACC,EAAWC,GAAZ,OAC/B,yBAAK7B,UAAU,gCAAgCc,IAAKe,GAClD,6BACE,6BAIE,0BAAM7B,UAAU,cAAc4B,EAAKE,MAClCF,EAAKG,OAAS,0BAAM/B,UAAU,OAAO4B,EAAKG,MAA5B,SACdH,EAAKZ,OAAS,0BAAMhB,UAAU,OAAO4B,EAAKZ,QAE7C,mCAtBNU,KAAKrB,MAAMG,KAAKI,KAAKe,KAAI,SAACC,EAAWC,GAAZ,OACvB,yBAAK7B,UAAU,qBAAqBgC,QAAS,kBAAM,EAAKC,YAAYL,IAAOd,IAAKe,GAC9E,6BACE,8BAAO,EAAKzB,MAAMyB,IAClB,+BAAQD,EAAKd,Y,+BA0Bf,IAAD,OACP,OAAIY,KAAKrB,MAAME,QACL,kBAAC,UAAD,MAIR,yBAAKP,UAAU,SAASE,cAAY,UAClC,wBAAIF,UAAU,cACZ,0CACY0B,KAAKrB,MAAMQ,YAAYC,KAEjCY,KAAKrB,MAAMQ,YAAYC,KAAO,kBAAC,IAAD,CAASkB,QAAS,kBAAM,EAAKC,YAAY,UAG3E,yBAAKjC,UAAU,gBACX0B,KAAKQ,qB,GArGIC,aAqHNhC","file":"static/js/5.099164bc.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Loader.module.scss';\n\nconst Loader: React.FC = () => (\n  <div className={styles.Loader} data-testid=\"Loader\">\n    <div className=\"loading-container\">\n      <div>\n        <div className=\"loader-container\">\n          <div className=\"loader\"></div>\n        </div>\n        <small>Fetching data...</small>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport { FaBrain, FaCode, FaGit, FaInfoCircle, FaLaptopCode, FaTags, FaUserSecret, FaTimes } from 'react-icons/fa';\nimport Loader from 'components/Loader/Loader';\nimport ReactGA from 'react-ga';\n\nclass Skills extends Component {\n  icons = [\n    <FaBrain />,\n    <FaCode />,\n    <FaGit />,\n    <FaLaptopCode />,\n    <FaTags />,\n    <FaInfoCircle />,\n    <FaUserSecret />\n  ];\n\n  state = {\n    error: null,\n    loading: true,\n    data: {\n      quote: { author: '', text: '' },\n      tech: []\n    },\n    activeSkill: {\n      key: '',\n      items: []\n    }\n  };\n\n  level = {\n    'Expert': '100%',\n    'Proficient': '75%',\n    'Advanced': '55%',\n    'Beginner': '25%'\n  };\n\n  componentDidMount() {\n    ReactGA.pageview('Skills');\n\n    fetch('assets/json/skills.json')\n      .then(res => res.json())\n      .then((result) => {\n        this.setState({ loading: false, data: result });\n      }, (error) => {\n        this.setState({\n          loading: false,\n          data: {\n            quote: { author: '', text: '' },\n            tech: []\n          }\n        });\n      });\n  }\n\n  setSkillSet(skillset: any) {\n    this.setState({ activeSkill: skillset || { key: '', items: [] } })\n  }\n\n  listSkillSet () {\n    if (!this.state.activeSkill.key) {\n      return (\n        this.state.data.tech.map((item: any, i: number) => (\n          <div className=\"skills__tech__item\" onClick={() => this.setSkillSet(item)} key={i}>\n            <div>\n              <span>{this.icons[i]}</span>\n              <small>{item.key}</small>\n            </div>\n          </div>\n        ))\n      )\n    } else {\n      return (\n        this.state.activeSkill.items.map((item: any, i: number) => (\n          <div className=\"skills__tech__item skill-item\" key={i}>\n            <div>\n              <div>\n                {/* <div>\n                  <img className=\"skill-icon\" src={item.icon} alt=\"\"/>\n                </div> */}\n                <span className=\"skill-name\">{item.name}</span>\n                {item.years && <span className=\"tag\">{item.years} yr/s</span>}\n                {item.level && <span className=\"tag\">{item.level}</span>}\n              </div>\n              <div></div>\n            </div>\n          </div>\n        ))\n      )\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (<Loader />)\n    }\n\n    return (\n      <div className=\"skills\" data-testid=\"Skills\">\n        <h2 className=\"page-title\">\n          <span>\n            Skills > {this.state.activeSkill.key}\n          </span>\n          { this.state.activeSkill.key && <FaTimes onClick={() => this.setSkillSet(null)} />}\n        </h2>\n\n        <div className=\"skills__tech\">\n          { this.listSkillSet() }\n        </div>\n\n        {/* <div className=\"skills__quote\">\n          <div className=\"skills__quote__text\">\n            <i>{this.state.data.quote['text']}</i>\n          </div>\n          <div className=\"skills__quote__author\">\n            <small>- {this.state.data.quote['author']}</small>\n          </div>\n        </div> */}\n      </div>\n    )\n  }\n};\n\nexport default Skills;"],"sourceRoot":""}